/* eslint-disable jsx-a11y/anchor-is-valid */
import React, { useState } from "react";
import { useHistory, useLocation } from "react-router-dom";

import dummyData from "assets/data/header";
import Logo from "assets/images/logo.svg";
import Heading from "components/atoms/Heading";
import Icon from "components/atoms/Icon";
import IconButton from "components/atoms/IconButton";
import Image from "components/atoms/Image";
import Link from "components/atoms/Link";
import MenuItem, { ActiveItem } from "components/molecules/Menu";
import Container from "components/organisms/Container";
import useWindowResize from "hooks/useWindowResize";
import mapModifiers, {
  handleRemoveScroll,
  handleRemoveScrollResize,
  handleToggleClassNoScroll,
} from "utils/functions";

type AccountNameType = {
  name?: string
}

const AccountName: React.FC<AccountNameType> = ({
  name,
}) => (
  <div className="m-account">
    <div className="m-account_icon">
      <Icon iconName="accountCircle" />
    </div>
    {
      name
      && (
      <Link modifiers={["white", "small"]}>
        {`Hi, ${name}`}
      </Link>
      )
    }
  </div>
);
export type LangItem={
  title:string;
  key:string;
}
export type DataMenuItem = {
  title: string;
  href?: string;
  active?: boolean;
  subMenu?: DataMenuItem[];
}

type HeaderMainProps = {
  language?:LangItem[];
  dataMenu: DataMenuItem[];
  indexActiveMenuSub?: number;
  handleClickBackSubMenu?: () => void;
  handleClickToggleSubMenu?: (index: number) => void;
  handleNavigate?:(href?:string)=>void;
  checkActive:(href?:string)=>boolean;
}

const MainHeader: React.FC<HeaderMainProps> = ({
  dataMenu,
  language,
  indexActiveMenuSub,
  handleClickBackSubMenu,
  handleClickToggleSubMenu,
  handleNavigate,
  checkActive,
}) => {
  const [activeLang, setActiveLang] = useState("vi");
  return (
    <ul className="o-header_nav container">
      {
      dataMenu.map((item, index) => (
        <MenuItem
          key={`dropdown-${index.toString()}`}
          type="li"
          modifiers={indexActiveMenuSub === index ? ["active", "mainMenu"] : ["mainMenu"]}
          handleClick={() => handleClickToggleSubMenu && handleClickToggleSubMenu(index)}
          main={(<Link modifiers={["white", "small"]}>{item.title}</Link>)}
        >
          <>
            <li className="o-header_backSubMenu">
              <IconButton handleClick={handleClickBackSubMenu} iconName="arrowRightAltWhiteHover" bgColor="transparent" />
            </li>
            {
              item.subMenu?.map((sub, idx) => (
                <ActiveItem
                  active={checkActive(sub.href)}
                  modifiers={["eerieBlack", "small"]}
                  handleClick={() => handleNavigate && handleNavigate(sub.href)}
                  key={`item-${idx.toString()}`}
                >
                  {sub.title}
                </ActiveItem>
              ))
            }
          </>
        </MenuItem>
      ))
    }
      {
      language && (
        <MenuItem
          type="li"
          modifiers={["language"]}
          main={(
            <>
              <Icon iconName="translate" />
              <Link modifiers={["white", "small"]}>Ngôn ngữ</Link>
            </>
          )}
        >
          {
          language.map((lang, idx) => (
            <ActiveItem
              handleClick={() => setActiveLang(lang.key)}
              active={lang.key === activeLang}
              key={`lang-${idx.toString()}`}
            >
              {lang.title}
            </ActiveItem>
          ))
        }
        </MenuItem>
      )
    }
    </ul>
  );
};

type HeaderUserProps = {
  handleNavigate:(href?:string)=>void;
  handleOpenAccount:()=>void;
  user?:AccountNameType;
  checkActive:(href?:string)=>boolean;
}

const HeaderUser:React.FC<HeaderUserProps> = ({
  handleNavigate,
  handleOpenAccount,
  user,
  checkActive,
}) => (
  <div className="o-header_user container">
    <MenuItem
      modifiers={user ? ["account", "pdT-11"] : ["account", "pdT-11", "notLogin"]}
      handleClick={handleOpenAccount}
      main={(
        <AccountName name={user?.name} />
      )}
    >
      {
      user ? (
        <>
          <ActiveItem handleClick={() => handleNavigate("/forgot")} active={checkActive("/forgot")}>Đổi mật khẩu</ActiveItem>
          <ActiveItem handleClick={() => handleNavigate("/logout")} active={checkActive("/logout")} modifiers={["carminePink"]}>Đăng xuất</ActiveItem>
        </>
      ) : (
        <>
          <ActiveItem handleClick={() => handleNavigate("/login")} active={checkActive("/login")}>Đăng nhập</ActiveItem>
          <ActiveItem handleClick={() => handleNavigate("/register")} active={checkActive("/register")}>Đăng ký</ActiveItem>
        </>
      )
    }
    </MenuItem>
  </div>
);
type HeaderProps = {
  user?: {
    name: string;
  }
}

const Header: React.FC<HeaderProps> = ({
  user,
}) => {
  const history = useHistory();
  const location = useLocation();

  const checkActive = (href?:string):boolean => {
    if (!href) return false;
    return location.pathname === href;
  };
  const [isToggleMenu, setIsToggleMenu] = useState(false);
  const [isToggleMenuSub, setIsToggleMenuSub] = useState(-1);

  const handleClickHamburger = () => {
    setIsToggleMenu(!isToggleMenu);
    setIsToggleMenuSub(-1);
    handleToggleClassNoScroll();
  };

  const handleRemoveToggle = (): void => {
    handleRemoveScroll();
    setIsToggleMenuSub(-1);
    setIsToggleMenu(false);
  };

  const handleOpenAccount = () => {
    if (window.innerWidth >= 991) {
      handleRemoveToggle();
    }
    // TODO logic account
  };

  const handleNavigate = (href?:string) => {
    if (!href) return;
    handleRemoveToggle();
    history.push(href);
  };

  useWindowResize(() => handleRemoveScrollResize(() => { handleRemoveToggle(); }));

  return (
    <div className="o-header">
      <Container modifiers="heading">
        <div className="o-header_wrap">
          <div className="o-header_hamburger">
            <div onClick={handleClickHamburger} className={mapModifiers("m-hamburger", isToggleMenu && "active")}>
              <span />
              <span />
              <span />
            </div>
          </div>
          <div className="o-header_left">
            <Link handleClick={() => handleNavigate("/")}>
              <div className="o-header_logo">
                <h1 className="o-header_img">
                  <Image imgSrc={Logo} alt="logo" ratio="1x1" />
                </h1>
                <Heading modifiers={["white", "650"]} type="h4">Poultry Connect</Heading>
              </div>
            </Link>
          </div>
          <div className={mapModifiers("o-header_main", isToggleMenu && "active", !user && "notLogin")}>
            {user
              && (
                <MainHeader
                  handleNavigate={handleNavigate}
                  language={dummyData.language}
                  dataMenu={dummyData.menu}
                  indexActiveMenuSub={isToggleMenuSub}
                  handleClickBackSubMenu={() => setIsToggleMenuSub(-1)}
                  handleClickToggleSubMenu={(index) => setIsToggleMenuSub(index)}
                  checkActive={checkActive}
                />
              )}
            <HeaderUser
              handleNavigate={handleNavigate}
              handleOpenAccount={handleOpenAccount}
              user={user}
              checkActive={checkActive}
            />
          </div>
          <div className="o-header_fakeRight" />
        </div>
      </Container>
    </div>
  );
};

export default Header;





.o-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: $zHeader;
    background-color: $richElectricBlue;
    padding: rem(8) 0;

    @include tablet-down {
        padding: 0;
    }

    &_wrap {
        display: flex;
        justify-content: space-between;
    }

    &_hamburger {
        position: relative;
        z-index: $zHamburger;
        align-items: center;
        display: none;
        @include tablet-down {
            width: rem(50);
            display: flex;
        }
    }
    &_left {
        flex-shrink: 0;
        @include tablet-down {
            display: flex;
            flex: 1;
            justify-content: center;
            align-items: center;
        }
    }
    &_logo {
        display: flex;
        align-items: center;
        .a-heading {
            @include desktop-down {
                @include fontBase(16, 20);
            }
        }
    }

    &_img {
        margin: 0;
        width: rem(64);
        height: rem(64);
    }

    //main
    &_main {
        flex-grow: 1;
        margin-left: rem(32);
        display: flex;
        align-items: center;
        .m-menuItem-mainMenu,
        .m-menuItem-language {
            padding: 0 rem(9);
            @include desktop-down {
                padding: 0 rem(5);
            }
            @include tablet-down {
                padding: 0;
            }
        }
        @include desktop-down {
            margin-left: rem(16);
        }
        @include tablet-down {
            margin-left: 0;
            padding-bottom: rem(50);
            display: block;
            position: fixed;
            top: 64px;
            left: -100%;
            z-index: $zMenuMain;
            width: 100%;
            height: calc(100vh - 64px);
            overflow-y: auto;
            background-color: $richElectricBlue;
            transition: left 0.4s linear;
            transition-delay: 0.2s;
            @include scrollBars(12, $celestialBlue, $aliceBlue, 20);
        }
        &-active {
            left: 0;
        }
        &-notLogin {
            justify-content: flex-end;
        }
    }

    &_nav {
        flex-grow: 1;
        display: flex;
        flex-wrap: wrap;
        align-items: center;

        @include tablet-down {
            display: block;
            .m-dropDown {
                margin-top: rem(30);
            }
        }
        &.container {
            @include tablet-up {
                padding: 0;
                max-width: auto;
                margin: 0 rem(-9);
            }
            @include desktop {
                margin: 0 rem(-5);
            }
        }
    }

    &_backSubMenu {
        @include tablet-up {
            display: none;
        }
        .a-icon {
            transform: rotate(180deg);
        }
    }

    //right
    &_user {
        @include tablet-up {
            padding: 0;
            margin: 0;
            display: flex;
            align-items: center;
            max-width: rem(250);
            width: auto;
            flex-shrink: 0;
        }
        @include break(991px, 1440px) {
            max-width: rem(200);
        }
        @include tablet-down {
            margin-top: rem(9);
            width: 100%;
            display: block;
        }
    }

    // fake right
    &_fakeRight {
        display: none;
        @include tablet-down {
            display: block;
            width: rem(50);
        }
    }
}

.m-account {
    display: flex;
    align-items: center;
    &_icon {
        margin-right: rem(10);
    }
    > .a-link {
        @include text-overflow(2);
    }
}

.m-hamburger {
    cursor: pointer;
    padding: rem(10) rem(10) rem(10) 0;
    span {
        position: relative;
        display: block;
        width: rem(18);
        height: 2px;
        margin-bottom: 2px;
        background-color: $white;
        transition: 0.5s ease;
        &:nth-child(1) {
            transform-origin: left;
        }
        &:nth-child(2) {
            transform-origin: center;
        }
        &:nth-child(3) {
            transform-origin: left;
        }
    }
    &-active {
        span {
            &:nth-child(1) {
                top: -1px;
                left: 0;
                transform: rotate(45deg);
            }
            &:nth-child(2) {
                top: 1px;
                right: 3px;
                transform: rotate(315deg);
            }
            &:nth-child(3) {
                transform: scaleX(0);
            }
        }
    }
}
