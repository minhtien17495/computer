
.animation1{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 0s;
}

.animation2{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 0.2s;
}

.animation3{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 0.4s;
}

.animation4{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 0.6s;
}

.animation5{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 0.8s;
}

.animation6{
  visibility: hidden;
  opacity: 0;
  transform: translateY(-100%);
  transition: transform 0.2s linear 1s;
}

.animation1_down{
  visibility: hidden;
  opacity: 0;
  transform: translateY(50px);
  transition: transform 0.2s linear 0s;
}

.animation2_down{
  visibility: hidden;
  opacity: 0;
  transform: translateY(70px);
  transition: transform 0.2s linear 0.2s,opacity 0s linear 0.2s;
}

.animation3_down{
  visibility: hidden;
  opacity: 0;
  transform:  translateY(90px);
  transition: transform 0.2s linear 0.4s,opacity 0s linear 0.4s;
}

.animation4_down{
  visibility: hidden;
  opacity: 0;
  transform:  translateY(110px);
  transition: transform 0.2s linear 0.6s,opacity 0s linear 0.6s;
}

.animation5_down{
  visibility: hidden;
  opacity: 0;
  transform:  translateY(130px);
  transition: transform 0.2s linear 0.8s,opacity 0s linear 0.8s;
}

.animation6_down{
  visibility: hidden;
  opacity: 0;
  transform:  translateY(150px);
  transition: transform 0.2s linear 1s,opacity 0s linear 1s;
}

.animation1_active{
  visibility: visible;
  opacity: 1;
  transform: translate(0);
}
.transformParent{
  transform: translateY(-200px);
  transition: 1s linear ;
}
.transformParent_active{
   transform: translateY(0);
}
.opacity0{
  opacity: 0;
}
// transition: background-color 1s linear 2s, color 1s;
// transition: property name | duration | timing function | delay



type TranslateType={
  locale: string;
}
const getTranslate = <T extends TranslateType>(lang: string, translates: T[]): T => {
  const itemFind = translates.find((item) => item.locale === lang);
  if (itemFind) return itemFind;
  return translates[0];
};
