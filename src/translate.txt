/* eslint-disable no-console */
/* eslint-disable no-underscore-dangle */
import * as chartjs from "chart.js";
import React, { useRef } from "react";
import { Bar } from "react-chartjs-2";

interface ChartMortalityReportProps{
  dataChart?: chartjs.ChartData;
  sumArray?:Array<number>;
}
const ChartMortalityReport: React.FC<ChartMortalityReportProps> = ({
  dataChart,
  sumArray,
}) => {
  const ref = useRef<chartjs.Chart>();
  const optionsChart = {
    responsive: true,
    maintainAspectRatio: 1276 / 390,
    plugins: {
      legend: {
        position: "bottom",
        labels: {
          color: "#3e3e3e",
          font(context: { chart: { width: any; } }) {
            const { width } = context.chart;
            // fontsize 16 => maxWidthChart = 1280 / 80
            const size = Math.round(width / 80);
            return {
              size,
              weight: 700,
            };
          },
        },
      },
      title: {
        display: true,
        text: "Mortality Report",
        color: "#3e3e3e",
        font(context: { chart: { width: any; } }) {
          const { width } = context.chart;
          // fontsize 16 => maxWidthChart = 1280 / 80
          const size = Math.round(width / 45);
          return {
            size,
            weight: 700,
          };
        },
      },
    },
    scales: {
      y: {
        title: {
          display: true,
          text: "Removals Rate (%)",
          color: "#3e3e3e",
          font(context: { chart: { width: any; } }) {
            const { width } = context.chart;
            // fontsize 16 => maxWidthChart = 1280 / 80
            const size = Math.round(width / 80);
            return {
              size,
              weight: 700,
            };
          },
        },
      },
      x: {
        title: {
          display: true,
          text: "Date old",
          color: "#3e3e3e",
          font(context: { chart: { width: any; } }) {
            const { width } = context.chart;
            // fontsize 16 => maxWidthChart = 1280 / 80
            const size = Math.round(width / 80);
            return {
              size,
              weight: 700,
            };
          },
        },
      },
    },
  };

  const plugins = [{
    afterDraw: (chart:any) => {
      if (!sumArray) return;
      if (!chart.config.data && chart.config.data.datasets.length <= 0) return;
      const { ctx } = chart;
      ctx.save();
      ctx.font = window.innerWidth < 575 ? "6px" : "12px";
      ctx.fillStyle = "#3e3e3e";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      ctx.restore();
      console.log(ctx);
      const meta = chart.getDatasetMeta(1);
      meta.data.forEach((element: { tooltipPosition: () => any; }, i:number) => {
        console.log("meta", meta);
        const position = element.tooltipPosition();
        const textWidth = ctx.measureText(`${sumArray[i]}`).width;
        const x = position.x - textWidth / 2;
        const y = position.y - 10;
        ctx.fillText(`${sumArray[i]}`, x, y);
      });
    },
  }];

  return (
    <div className="o-chartMortalityReport">
      <Bar plugins={plugins} ref={ref} type="bar" data={dataChart} options={optionsChart} />
    </div>
  );
};

export default ChartMortalityReport;




import { Story, Meta } from "@storybook/react";
import base from "paths.macro";
import React from "react";

import Container from "../Container";

import ChartMortalityReport from ".";

export default {
  title: `Components/${base.replace("/src/components/", "").replace(/\/$/, "")}`,
  component: ChartMortalityReport,
} as Meta;

const arbitraryStackKey = "stack1";
const sumArray = [0, 0.02, 0.06, 0.04, 0.08, 0.04, 0.04, 0.04, 0.04, 0.06, 0.1];
const data = {
  labels: ["0", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5"],
  datasets: [
    // These two will be in the same stack.
    {
      stack: arbitraryStackKey,
      label: "Dead Rate",
      data: [0, 0.02, 0.06, 0.04, 0.08, 0.04, 0.04, 0.04, 0.04, 0.06, 0.1],
      backgroundColor: "#b22322",
    },
    {
      stack: arbitraryStackKey,
      label: "Culled Rate",
      data: [0, 0.02, 0.07, 0.01, 0.03, 0.02, 0.04, 0.01, 0, 0.08, 0.02],
      backgroundColor: "#cd950d",
    },
  ],
};
export const normal: Story = () => (
  <Container>
    <ChartMortalityReport dataChart={data} sumArray={sumArray} />
  </Container>
);
