import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';

import Button from 'components/atoms/Button';
import Icon from 'components/atoms/Icon';
import Text from 'components/atoms/Text';
import Upload from 'components/molecules/Upload';
import Modal from 'components/organisms/Modal';
import { requestGetListCourseFiles } from 'reducers/coursefile/actions';
import {
  setUploadFiles,
  requestUploadFiles,
  requestDeleteFile,
  setUploadProgress,
  filterFileProgress,
  requestSubmitUploadFiles,
  resetUploadFiles,
  uploadFilesOnError,
} from 'reducers/courseuploadfiles/actions';
import { ProgressFile } from 'reducers/courseuploadfiles/types';
import useSelector from 'selectors/useSelector';

interface UploadModalProps{
    isShowModal: boolean;
    onHideModel: () => void;
    phaseFolderId?: number;
}
const UploadModal: React.FC<UploadModalProps> = ({
  isShowModal,
  onHideModel,
  phaseFolderId,
}) => {
  const { t } = useTranslation(['footwear_course', 'button']);
  const owlClass = 't-uploadModal';
  const { innerHeight, innerWidth } = window;
  const [draggingStyle, setDraggingStyle] = useState('');
  const [heightAreaUploadFile, setHeightAreaUploadFile] = useState(0);
  const {
    dataUploadFile, fileProgress, uploadedFiles,
  } = useSelector((state) => state.courseuploadfiles);
  const dispatch = useDispatch();

  const onDragOver = (e: React.DragEvent<HTMLFormElement | HTMLLabelElement>): void => {
    e.preventDefault();
    e.stopPropagation();
    setDraggingStyle('dragging-file');
  };

  const onDragEnter = (e: React.DragEvent<HTMLFormElement | HTMLLabelElement>): void => {
    e.preventDefault();
    e.stopPropagation();
  };

  const onDragLeave = (e: React.DragEvent<HTMLFormElement | HTMLLabelElement>): void => {
    e.preventDefault();
    e.stopPropagation();
    setDraggingStyle('');
  };

  const onFileDrop = (e: React.DragEvent<HTMLFormElement | HTMLLabelElement>): void => {
    e.preventDefault();
    e.stopPropagation();
    setDraggingStyle('');
    const fileList = e.dataTransfer.files;
    if (fileList) {
      dispatch(setUploadFiles(fileList));
    }
    e.dataTransfer.clearData();
  };

  const filesSelected = (e: React.ChangeEvent<HTMLInputElement>): void => {
    e.preventDefault();
    e.stopPropagation();
    const fileList = e.target.files;
    if (fileList) {
      dispatch(setUploadFiles(fileList));
    }
    e.target.value = '';
  };

  const onHandleRemoveFile = (fileId: number): void => {
    const newDataUploadFile = [...dataUploadFile];
    const fileDelete = newDataUploadFile.find((item) => item.fileId === fileId);
    if (fileDelete) {
      dispatch(requestDeleteFile(fileDelete));
    } else {
      dispatch(filterFileProgress(fileId));
    }
    if (innerWidth < 768) {
      document.getElementsByClassName('t-uploadModal_content_upload_file')[0].setAttribute('style', 'height: auto');
    }
  };

  useEffect(() => {
    if (innerWidth < 768) {
      const modalContentElement: HTMLCollectionOf<Element> | undefined = document.getElementsByClassName('modal-content');
      const heightWrapFilesElement: HTMLCollectionOf<Element> | undefined = document.getElementsByClassName('t-uploadModal_content_upload_file');

      if (heightWrapFilesElement && heightWrapFilesElement[0]
          && modalContentElement && modalContentElement[0]) {
        const heightWrapFiles = heightWrapFilesElement[0].clientHeight;
        const heightModalUploadFiles = modalContentElement[0].clientHeight;

        if (innerHeight <= heightModalUploadFiles + 20) {
          const uploadHeightFileUpload = (heightWrapFiles
            - (heightModalUploadFiles - innerHeight)) - 20;
          document.getElementsByClassName('t-uploadModal_content_upload_file')[0].setAttribute('style', `height: ${uploadHeightFileUpload}px`);
          setHeightAreaUploadFile(uploadHeightFileUpload);
        }
      }
    }
  }, [heightAreaUploadFile, innerHeight, innerWidth, dataUploadFile.length]);
  const allowedExtensions = /\.(jpg|png|jpeg|xlsx|pdf|mp4)$/i;
  const uploadFile = (files: ProgressFile[]): void => {
    console.log(files);
    if (files.length > 0) {
      files.forEach((item) => {
        const config = {
          // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
          onUploadProgress: (progressEvent: ProgressEvent<EventTarget>) => {
            const percentCompleted = Math.round(
              (progressEvent.loaded * 100) / progressEvent.total,
            );
            dispatch(setUploadProgress(item.id, percentCompleted));
          },
        };
        if (item.file.name.match(allowedExtensions)) {
          const formPayload = new FormData();
          // fix issue when open view file when file name contain character
          formPayload.append('file', item.file, item.name.replace(/[|?*&;#$%@"<>()+,]/g, ''));
          if (phaseFolderId) {
            formPayload.append('phase_folder_id', `${phaseFolderId}`);
          }
          dispatch(requestUploadFiles(formPayload, item.id, config));
        } else {
          dispatch(setUploadProgress(item.id, 100));
          dispatch(uploadFilesOnError({
            code: 400,
            detail: 'File is not correct format.',
            title: 'File is not correct format.',
            message: 'File is not correct format.',
          }, item.id));
        }
      });
    }
  };
  useEffect(() => {
    console.log(fileProgress);
    const fileToUpload = fileProgress.filter((file) => file.progress === 0);
    if (fileToUpload) {
      uploadFile(fileToUpload);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fileProgress.length]);

  const onHandleSubmitFiles = (): void => {
    const isCheckUploaded = fileProgress.every((item) => item.isUploading === false);
    if (isCheckUploaded) {
      if (dataUploadFile && dataUploadFile.length > 0) {
        dispatch(resetUploadFiles());
        if (onHideModel) {
          onHideModel();
        }
        const fileIds = dataUploadFile.map(({ id }) => id);
        dispatch(requestSubmitUploadFiles({
          folderId: `${phaseFolderId}`,
          fileIds,
        }));
      }
    }
  };

  const onHandleHideModel = (): void => {
    if (onHideModel) {
      dispatch(resetUploadFiles());
      dataUploadFile.forEach((item) => {
        dispatch(requestDeleteFile(item));
      });
      onHideModel();
    }
  };

  useEffect(() => {
    if (uploadedFiles && phaseFolderId) {
      dispatch(requestGetListCourseFiles(phaseFolderId));
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [uploadedFiles]);

  return (
    <div className={`${owlClass}`}>
      <Modal modifier="upload" isShow={isShowModal} onHide={onHandleHideModel}>
        <div className={`${owlClass}_wrap`}>
          <div className={`${owlClass}_title`}>
            <Text>{t('title_upload_file')}</Text>
          </div>
          <div className={`${owlClass}_line`} />
          <div className={`${owlClass}_content`}>
            <form
              className={`${owlClass}_content_form ${
                dataUploadFile && dataUploadFile.length > 0 ? ' size-area-upload' : ''
              } ${draggingStyle}`}
              encType="multipart/form-data"
              onDragOver={onDragOver}
              onDragEnter={onDragEnter}
              onDragLeave={onDragLeave}
              onDrop={onFileDrop}
            >
              <div className={`${owlClass}_content_area_upload`}>
                <Icon iconName="upload-orange" />
                <input
                  type="file"
                  id="file"
                  multiple
                  onChange={filesSelected}
                />
                <label
                  htmlFor="file"
                  onDragOver={onDragOver}
                  onDragEnter={onDragEnter}
                  onDragLeave={onDragLeave}
                  onDrop={onFileDrop}
                >
                  {t('drap_file')}
                  {' '}
                </label>
              </div>
            </form>
            {fileProgress && fileProgress.length > 0 && (
              <div className={`${owlClass}_content_upload`}>
                <Text>Uploading</Text>
                <div className={`${owlClass}_content_upload_file`}>
                  {fileProgress.map((item, index) => (
                    <>
                      <Upload
                        key={`item-${index.toString()}`}
                        fileName={item.file.name}
                        size={item.file.size}
                        fileType={item.file.type}
                        percentage={item.progress}
                        handleRemove={(): void => onHandleRemoveFile(item.id)}
                        isUploading={item.isUploading || false}
                        messageError={item.errors || ''}
                      />
                      <div className={`${owlClass}_content_line`} />
                    </>
                  ))}
                </div>
              </div>
            )}
          </div>
          <div className={`${owlClass}_note`}>
            <Text>{ t('warn_the_participants')}</Text>
          </div>
          <div className={`${owlClass}_button`}>
            <Button
              modifiers={['white', 'ovalFill', 'uppercase', 'bold']}
              type="submit"
              handleClick={onHandleSubmitFiles}
              disabled={
                fileProgress
                && (fileProgress.length === 0
                  || fileProgress.some((item) => item.errors || item.isUploading))
              }
            >
              {t('button:submit')}
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default UploadModal;
