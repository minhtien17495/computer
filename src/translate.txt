import { ChartData } from "chart.js";
import React, { useEffect, useState, useMemo } from "react";
import { Bar } from "react-chartjs-2";

const styleText = (label?:string, minFontSize?:number, fontWeight?:number, ratio?:number) => ({
  display: true,
  text: label,
  color: "#3e3e3e",
  font(context: { chart: { width: any; } }) {
    const { width } = context.chart;
    // fontsize 16 => maxWidthChart = 1280 / 80
    const size = Math.max(Math.round(width / (ratio || 80)), minFontSize || 10);
    return {
      size,
      weight: fontWeight || 700,
    };
  },
});

type DataChartItem={
  label:string,
  data:Array<number>
}

interface ChartVaccineProps{
  labels?:Array<string>;
  dataChart?: DataChartItem[];
  infoChart?:{
    labelY?:string;
    labelX?:string;
    titleChart?:string;
  }
}

const ChartVaccine: React.FC<ChartVaccineProps> = ({
  labels,
  dataChart,
  infoChart,
}) => {
  const [data, setData] = useState<ChartData>();
  const optionsChart = useMemo(() => ({
    responsive: true,
    maintainAspectRatio: 1276 / 390,
    plugins: {
      legend: {
        position: "bottom",
        labels: styleText(),
      },
      title: {
        ...styleText(infoChart?.titleChart, 14, 700, 45),
        padding: {
          bottom: 20,
        },
      },
    },
    scales: {
      y: {
        title: styleText(infoChart?.labelY),
        ticks: styleText(undefined, 12, 500),
      },
      x: {
        title: styleText(infoChart?.labelX),
        ticks: styleText(undefined, 8, 500),
      },
    },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }), [dataChart]);

  const plugins = useMemo(() => [{
    afterDraw: (chart:any) => {
      if (!dataChart) return;
      if (!chart.config.data && chart.config.data.datasets.length <= 0) return;
      const { ctx } = chart;
      ctx.save();
      ctx.fillStyle = "#3e3e3e";
      ctx.textAlign = "center";
      ctx.textBaseline = "bottom";
      ctx.restore();
      const meta = chart.getDatasetMeta(0);
      meta.data.forEach((element: { tooltipPosition: () => any; }, i:number) => {
        const position = element.tooltipPosition();
        const textWidth = ctx.measureText(`${dataChart[0].data[i]}`).width;
        const x = position.x - textWidth / 2;
        const y = position.y - 10;
        ctx.fillText(`${dataChart[0].data[i]}`, x, y);
      });
    },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }], [dataChart]);

  useEffect(() => {
    if (!dataChart) return;
    const newData = {
      labels,
      datasets: [
        {
          label: dataChart[0].label,
          data: dataChart[0].data,
          backgroundColor: "#b22322",
        },
      ],
    };
    setData(newData);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dataChart]);
  return (
    <div className="o-chartMortalityReport">
      <Bar type="bar" plugins={plugins} data={data} options={optionsChart} />
    </div>
  );
};
export default ChartVaccine;


import { Story, Meta } from "@storybook/react";
import base from "paths.macro";
import React from "react";

import ChartVaccine from ".";

export default {
  title: `Components/${base.replace("/src/components/", "").replace(/\/$/, "")}`,
  component: ChartVaccine,
} as Meta;

const infoChart = {
  labelY: "Lượng ăn vào (gram/con)",
  labelX: "Ngày tuổi",
  titleChart: "Báo cáo lượng thức ăn",
};

const labels = ["0", "vacciene 1", "vacciene 2", "vacciene 3", "5", "6", "7"];

const ChartData = [{
  label: "ti le",
  data: [1, 2, 3, 4, 5, 6],
}];

export const normal: Story = () => (
  <ChartVaccine dataChart={ChartData} labels={labels} infoChart={infoChart} />
);
