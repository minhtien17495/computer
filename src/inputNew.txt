import React, { forwardRef } from "react";
import { useFormContext } from "react-hook-form";

interface FieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  error?:string;
}

const Field: React.FC<FieldProps> = forwardRef<HTMLInputElement, FieldProps>(({
  error,
  ...props
}, ref) => (
  <>
    <input
      {...props}
      ref={ref}
    />
    {error && <span>{error}</span>}
  </>
));

export default Field;



interface FieldHookFormProps extends FieldProps{
  name:string;
}

export const FieldHookForm: React.FC<FieldHookFormProps> = ({
  name,
}) => {
  const { register, formState: { errors } } = useFormContext();
  const error = errors && errors[name]?.message;
  return (
    <Field
      error={error}
      {...register(name)}
    />
  );
};
