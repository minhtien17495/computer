import {
  useState, useEffect, Dispatch, SetStateAction,
} from 'react';
import { useTranslation } from 'react-i18next';
import { useHistory, useLocation } from 'react-router-dom';

import { findPhaseActive } from 'function/func';
import { getSlugPhase } from 'function/utils';
import { Phase, DataDetailCourseResponse } from 'reducers/detailcourse/phase/types';


const useActivePhase = (data: DataDetailCourseResponse|null): {phaseSelect: Phase|undefined;
  setPhaseSelect: Dispatch<SetStateAction<Phase | undefined>>;} => {
  const history = useHistory();
  const location = useLocation<{phaseSlug: string}>();
  const [phaseSelect, setPhaseSelect] = useState<Phase>();
  const { i18n } = useTranslation();
  useEffect(() => {
    const setPhaseActiveEffect = (): void => {
      if (!data) return;
      if (data.phases.length === 0) {
        history.push('/');
      }
      if (location.state && location.state.phaseSlug) {
        const phaseActiveByLocation = data.phases.find((item) => getSlugPhase(i18n
          .language, item) === location.state.phaseSlug);
        if (phaseActiveByLocation) {
          setPhaseSelect(phaseActiveByLocation);
        }
        return;
      }
      if (phaseSelect) {
        const phaseActive = data.phases.find(
          (item) => item.phasesTranslations[0].phaseId
          === phaseSelect.phasesTranslations[0].phaseId,
        );
        if (phaseActive) {
          setPhaseSelect(phaseActive);
          return;
        }
      }
      const phaseActive = findPhaseActive(data);
      if (phaseActive) {
        setPhaseSelect(phaseActive);
      }
    };
    setPhaseActiveEffect();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data]);
  return {
    phaseSelect,
    setPhaseSelect,
  };
};

export default useActivePhase;
